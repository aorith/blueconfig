name: build-blueconfig
on:
  schedule:
  - cron: "35 04 * * *"
  push:
    branches:
    - master
    paths-ignore:
    - "**.md"
    - "**.txt"
    - "post-install/**"

env:
  UPSTREAM_IMAGE: quay.io/fedora-ostree-desktops/silverblue
  IMAGE_NAME: blueconfig
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs for
# pull requests only.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build-and-push:
    name: Build and push image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        variant: ["vanilla", "nvidia"]
        include:
        - major_version: 40

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check for new upstream version
      id: check-new-version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" != "schedule" ]]; then
          echo "Not running an schedule event (${{ github.event_name }}), skipping version check."
          echo "continue=true" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        sudo apt-get update -y && sudo apt-get install -y skopeo jq
        if bash ./check-upstream-version.sh "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.major_version }}" "${{ env.UPSTREAM_IMAGE }}:${{ matrix.major_version }}"; then
            echo "continue=true" >> "$GITHUB_OUTPUT"
        else
            echo "continue=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Generate tags
      if: steps.check-new-version.outputs.continue == 'true'
      id: generate-tags
      shell: bash
      run: |
        MAJOR_VERSION="${{ matrix.major_version }}"
        VARIANT="${{ matrix.variant }}"

        case "$VARIANT" in
          vanilla)
            BUILD_TAGS=("stable")
            CONTAINER_FILE="Containerfile"
            ;;
          nvidia)
            BUILD_TAGS=("nvidia")
            CONTAINER_FILE="Containerfile.nvidia"
            ;;
          *)
            echo "Unknown variant '$VARIANT'."
            exit 1
            ;;
        esac

        echo "Generated the following build tags: "
        for TAG in "${BUILD_TAGS[@]}"; do
            echo "${TAG}"
        done

        # Shown in rpm-ostree status
        VERSION="${MAJOR_VERSION}.$(date +%Y%m%d).$(date +%H)"

        echo "alias_tags=${BUILD_TAGS[*]}" >> "$GITHUB_OUTPUT"
        echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        echo "container_file=${CONTAINER_FILE}" >> "$GITHUB_OUTPUT"

    # Build image using Buildah action
    - name: Build Image
      if: steps.check-new-version.outputs.continue == 'true'
      id: build_image
      uses: redhat-actions/buildah-build@v2
      with:
        containerfiles: |
          ./${{ steps.generate-tags.outputs.container_file }}
        image: ${{ env.IMAGE_NAME }}
        tags: |
          ${{ steps.generate-tags.outputs.alias_tags }}
        build-args: |
          UPSTREAM_IMAGE=${{ env.UPSTREAM_IMAGE }}
          FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          VERSION=${{ steps.generate-tags.outputs.version }}
        layers: false
        oci: true

    # Push the image to GHCR (Image Registry)
    - name: Push To GHCR
      uses: redhat-actions/push-to-registry@v2
      id: push
      if: github.event_name != 'pull_request' && steps.check-new-version.outputs.continue == 'true'
      with:
        image: ${{ steps.build_image.outputs.image }}
        tags: ${{ steps.build_image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}
        extra-args: |
          --compression-format=zstd:chunked
          --compression-level=19

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      if: github.event_name != 'pull_request' && steps.check-new-version.outputs.continue == 'true'
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Sign container
    - uses: sigstore/cosign-installer@v3.5.0
      if: github.event_name != 'pull_request' && steps.check-new-version.outputs.continue == 'true'

    - name: Sign container image
      if: github.event_name != 'pull_request' && steps.check-new-version.outputs.continue == 'true'
      run: |
        echo "${{ env.COSIGN_PRIVATE_KEY }}" > cosign.key
        cosign sign -y --key cosign.key ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}@${TAGS}
      env:
        TAGS: ${{ steps.push.outputs.digest }}
        COSIGN_EXPERIMENTAL: false
        COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
